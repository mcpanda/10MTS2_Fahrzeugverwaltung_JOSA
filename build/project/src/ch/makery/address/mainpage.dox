/**
\mainpage Fuhrparkverwaltung

\section sec1 Projektauftrag

Entwicklung eines Programmes, das die Verwaltung eines Fuhrparks ermöglicht.<br>
<ul>
<li> Ein Unternehmen hat einen Fuhrpark der den Mitarbeiter*innen zur Verfügung steht.</li>
<li> Mitarbeiter*innen können für einen bestimmten Zeitraum und einen zu nennenden Zweck ein Fahrzeug ausleihen.</li>
<li> Für unterschiedliche Zwecke (Stadtfahrt, Langstreckenfahrt, Transport von Arbeitsmaterial) 
	 werden unterschiedliche Fahrzeugtypen (z.B. PKW, LKW, Motorrad) bereitgestellt.</li>
<li> Die Mitarbeiter-Daten sowie die Daten des Fuhrparks und Fahrzeugbuchungen werden in einer XML-Datei gespeichert.</li>
</ul>

\section sec2 Vorbereitende Aufgaben

\subsection sec2_1 Projekt-Vorbereitungen

<b>Zielsetzung</b>: Abschluss der VIII. Ausbaustufe <br>

<b>Arbeitsrollen:</b> <br>
<ul>
<li> Julia: Organisator, Software-Tests </li>
<li> Olga: Guru, Software-Tests </li>
<li> Simon: Feelgood-Manager, Protokollant, Software-Tests </li>
<li> Alex: Spec-Checker, Continuous Integration, Software-Tests </li>
</ul>

\subsection sec2_2 Technische Vorbereitungen

<b>Entwicklungsumgebung:</b> Eclipse und Scene Builder. <br>
Begründung: Allen Gruppenmitgliedern fehlen die Erfahrungen mit NetBeans und IntelliJ. <br>
<br>
<b>Datenaustausch:</b> GitHub. <br>
Begründung: Auch wenn es Zeit brauchte, bis alles funktionsfähig eingerichtet wurde, so überzeugten die Vorteile, wie 
versionsabhängiges pull und push, versionsabhängiges Vergleichen der Quelltexte, IssueManagement, History, Einbidung in Exclipse. <br>

\section sec3 Ausbaustufen

\subsection sec3_1 I. Ausbaustufe: Adressbuch erstellen

\image html Ausbaustufe_1.png "" width= 761px 

Erledigung der Aufgabe durch erfolgreiche Behandlung des Tutorials von code.makery samt Einhaltung der Model-View-Control Modells. <br>
Es wurden leichte Änderung eingeführt, wie z.B. eine PersonenID, oder die Verhinderung von PersonenID-Duplikaten, welche in der Validierungsfunktion abgefangen werden. <br>
<br>
Mit JavaFX erzeugen wir eine Stage (Grundgerüst unseres Anzeigefenster, mit Menüpunkten und Maximieren, Minimieren, Schließen Buttons rechts oben) 
und dazugehörige Scenes (Anzeigefenster innerhalb des Grundgerüstes).<br>
Bei jedem Öffnen einer neuen Scene werden die dazugehörigen Controller und *.fxml Dateien übergeben.<br>
<br>
Bei den Klassen nutzen wir Properties. Dies ist notwendig, um später mit ObservableLists und Listener zu arbeiten und damit 
unverzüglich getätigte Änderungen bzw. getroffene Auswahl anzeigen zu lassen. <br>
<br>
Mit Listener und Lambda Expressions können wir gewählte Objekte direkt anzeigen lassen.

~~~~~~~~~~~~~~~{.java}
personTable.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue)
																	-> showPersonDetails(newValue));
~~~~~~~~~~~~~~~

Dabei sind Lambda Expressions Methoden die ohne Klassen auskommen und sofort ausgeführt werden, ohne vorherige Definition/Deklaration.<br>
<br>
Mit Preferences speichern wir betriebssystemabhängig den Pfad der zuletzt geöffnete Datei.<br>
<br>
Mit JAXB (Java Architecture for XML Binding) ordnen wir unsere Objekte um sie in einer *.xml Datei abspeichern zu können. <br>
Hierfür benötigen wir zusätzlich noch die Klasse PersonListWrapper, die unsere Objekte aus einer ObservableList zu einem \@XmlRootElement macht, 
da JAXB nur auf \@XmlRootElement angewandt werden kann. 

\subsection sec3_2 II. Ausbaustufe: Verwaltung von Fahrzeugen

\image html Ausbaustufe_2.png "" width= 761px

Erledigung der Aufgabe durch Übernahme der Klasse Person und Anpassung an Fahrzeuge. <br>
Die Speicherung erfolgt in einer separaten *.xml Datei, welche sich aus der Personen *.xml Datei herleitet.

~~~~~~~~~~~~~~~{.java}
	public File getFahrzeugFilePath() {
		Preferences prefs = Preferences.userNodeForPackage(MainApp.class);
		String filePath = prefs.get("filePath", null);
		if (filePath != null) {										// Herleitung des Dateipfades für Fahrzeuge
			int pos = filePath.lastIndexOf("."); 					// pos des Punktes im Dateipfad
			filePath = filePath.substring(0, pos); 					// Kürzung bis zum Punkt
			String filePathFahrzeug = filePath + "_Fahrzeug.xml";	// Erweiterung des Dateipfades für die Fahrzeuge
			return new File(filePathFahrzeug);
		} else {
			return null;
		}
	}
~~~~~~~~~~~~~~~
<br>
Auch die Fahrzeuge bekommen eine eigenständige FahrzeugID, die jedoch vom System vergeben wird, d.h.: <br>
legt man eine neues Fahrzeug an, so wird diesem die letzte FahrzeugID + 1 zugeordnet, bzw. die FahrzeugID 1, falls es kein Fahrzeug bisher gab.<br>

\subsection sec3_3 III. Ausbaustufe: Implementierung eines Buchungssystems

\image html Ausbaustufe_3.png "" width= 761px

Für die Buchung wird eine Klasse gemäß der Personenklasse erstell, welche neben der BuchungsID 
auch eine FahrzeugID und PersonID hat, um damit einen Verknüpfung zu den korrespondierenden 
Fahrzeugen und Personen zu haben. <br>
Die Speicherung erfolgt ebenfalls wie bei den Fahrzeugen in einer separaten *.xml Datei, die sich aus der 
Personen *.xml Datei herleiten lässt.<br>
Um zu prüfen ob ein Fahrzeug bereits verliehen wurde bzw. eine Person bereits ein Fahrzeug ausleiht, 
wird ein Ausleih-Flag bei Person und Fahrzeug eingeführt. Nur wenn das Flag != "Nein" ist, kann man etwas ausleihen.<br>
Eine Validierungsüberprüfung überprüft auch eine mögliche Überschneidung der Ausleihzeiträumen.
<br>
\subsection sec3_4 IV. Ausbaustufe: Algorithmische Optimierung

\image html Ausbaustufe_4.png "" width= 761px

\subsubsection sec3_4_1 Suchfunktion

Die lineare Suche wurde bei der ComboBox und der Suche mit binären Bäumen implementiert.
	
\subsubsection sec3_4_2 Sortierung

Wir haben uns für den Selection-Sort Sortieralgorithmus entschieden, da wir vergleichsweise große Datenmengen 
bewegen müssen (ganze Objekte) und bei der Datenbewegung stets von einer Ordnung O(n) abhängig sind. <br>

\image html Selection_Sort.gif "Selection-Sort - Quelle: http://www.xybernetics.com/techtalk/SortingAlgorithmsExplained/SortingAlgorithmsExplained.html"  width= 600px
\image html Sortieralgorithmen_im_Vergleich.png "Sortieralgorithmen im Vergleich - Quelle: https://vowi.fsinf.at/images/5/59/TU_Wien-Algorithmen_und_Datenstrukturen_1_VL_(Raidl)_-_Sortieralgorithmen_im_Vergleich.pdf"  width= 600px

Des Weiteren werden Strings (Nachname, Vorname, ...) lexikographisch sortiert. Sollte dabei identische Strings auftreten, so wird nach einem weiterem Attribut verglichen (z.B. der Vorname, wenn man nach dem Nachnamen sortieren möchte). <br>
Sollte auch beim zweiten Vergleich eine Identität vorliegen, so wird nach der ID verglichen. Da die ID einmalig ist, haben wir stets eine totale Ordnung.<br>
~~~~~~~~~~~~~~~{.java}
public ObservableList<Person> sortNachname (ObservableList<Person> persons) {
    ObservableList<Person> personenListe= FXCollections.observableArrayList();
    personenListe.setAll(persons);			// Erstelle Kopie von persons
    Person Platzhalter= new Person();		// Platzhalter von der Klasse Person. Nötig, für das Spätere tauschen innerhalb der Liste

	for (int i= 0; i < personenListe.size() - 1; i++) {			// durchlaufe die gesamte personenListe
		int minIndex= i;										// Annahme, die aktuelle Position enthält den kleinsten Eintrag
		Platzhalter= personenListe.get(i);

		for (int j= i + 1; j < personenListe.size(); j++) {		// durchlaufe den Rest der Liste
			// vergleiche ob es sich ein kleinerer Eintrag finden lässt
			if (Platzhalter.getLastName().compareTo(personenListe.get(j).getLastName()) > 0) {	
				// falls ja, so wird die Position und Inhalt des neuen Minimum zwischengespeichert
				minIndex= j;																	
				Platzhalter= personenListe.get(j);
			}

			if(Platzhalter.getLastName().compareTo(personenListe.get(j).getLastName()) == 0) { 			// falls der Nachnahme identisch ist,
				if (Platzhalter.getFirstName().compareTo(personenListe.get(j).getFirstName()) > 0) {	// so wird der Vorname Verglichen
					minIndex= j;
					Platzhalter= personenListe.get(j);
				}

				if (Platzhalter.getFirstName().compareTo(personenListe.get(j).getFirstName()) == 0) {		// falls auch der Vorname identisch ist,
					if (Platzhalter.getPersonID() > personenListe.get(j).getPersonID()) {					// so wird die ID verglichen
						minIndex= j;
						Platzhalter= personenListe.get(j);
					}
				}
			}													// am Ende haben wir ein Minimum von der Liste
		}
		personenListe.set(minIndex, personenListe.get(i));		// Tausche aktuelle Position mit der Postion des Minimum
		personenListe.set(i, Platzhalter);
	}
	return personenListe;
}
~~~~~~~~~~~~~~~
 
\subsection sec3_5 V. Ausbaustufe: Optimierung der Datenmodellierung

\image html Ausbaustufe_5.png "" width= 761px

Für die Unterteilung der Fahrzeuge in Subklassen wurde das Attribut Fahrzeugtyp hinzugefügt. <br>
Bei der Buchung wird mit Hilfe von ComboBoxen die verfügbaren Fahrzeuge, abhängig vom ausgewählten 
Fahrzeugtyp bereitgestellt.<br>

\subsection sec3_6 VI. Ausbaustufe:  Ergänzungen und eigene Anforderungen: ComboBoxen mit Filterfunktion

\image html Ausbaustufe_6.png "" width= 761px

Die vorhandenen ComboBoxen in JavaFX werden durch eine Filterung ergänzt. <br>
Hierbei werden die Listen der Personen gemäß Tastatureingabe gefiltert und nur diejenigen in der Liste gelassen, welche 
die Tastatureingabe als Substring innehaben.

~~~~~~~~~~~~~~~{.java}
    public void handleAutoCompletePerson (KeyEvent event) {

    	personIDBox.show();																// oeffne die ComboBoxauswahl

    	KeyCode code= event.getCode();													// Keyevent code registriert alle Tastatureingaben

    	if((code == KeyCode.BACK_SPACE) && (filterPerson.length() > 0)) {				// wenn die Tastatureingabe ein Backspace war 
																						// und die Länge des Strings filerPerson größer 0 ist, dann:
    		filterPerson= filterPerson.substring(0, filterPerson.length()-1);			// lösche den letzten Char in dem String filerPerson
    	}

    	if(code.isDigitKey() || code.isLetterKey() || code == KeyCode.SHIFT) {			// wenn die Tastatureingabe eine Zahl oder ein Buchstabe oder die Tate SHIFT war, dann:
    		filterPerson+= event.getText();												// speichere diesen Char in filterPerson
    	}

    	if (filterPerson.length() > 0) {												// wenn filterPerson größer 0 ist, dann:
    		personBeschreibungBoxList.clear();											// lösche die personBeschreibungBoxList, um etwaige mehrfachaufnahme zu verhindern

			for(int i= 0; i < personList.size(); i++){									// gehe alle Einträge der personList durch
    			String vergleich= personList.get(i).toLowerCase();						// speichere Eintrag in der personList mit Kleinbuchstaben zwischen,
																						// da bei SHIFT+Buchstabe nur der Buchstabe bei filterPerson aufgenohmen wird
    			if (vergleich.indexOf(filterPerson) > -1) {								// wenn die Tastatureingabe ein Substring einer Personenbeschreibung ist, dann
        			personBeschreibungBoxList.add(personList.get(i));					// nimm die Personenbeschreibung in personBeschreibungBoxList auf
    			}
    	  	}
		}

    	if (code == KeyCode.ESCAPE) {		// wenn ESC gedrückt wurde, dann:
    		filterPerson= "";				// wird filterPerson geleert
    		personIDBox.setValue("");
    	}

    	if (code == KeyCode.ENTER) {		// wenn ENTER gedrückt wurde, dann:
    		filterPerson= "";				// wird filterPerson geleert
    		personIDBox.setValue("");
    	}

    	if(filterPerson.length()== 0) {		// wenn filterPerson leer ist, dann:
    		personBeschreibungBoxList.setAll(personList);	// wird die personList in die personBeschreibungBoxList kopiert
    	}
    }
~~~~~~~~~~~~~~~

Des Weiteren werden bei der Buchung die ComboBoxen derart genutzt, dass durch die ObservableList und einen Listener 
die ComboBoxen von einander abhängig sind, d.h. wählt man eine Person aus, so werden die Fahrzeugtypen 
anhand des Führerscheines reduziert, und abhängig von der getroffen Wahl des Fahrzeugtyps, werden die Fahrzeuge aussortiert.<br>

~~~~~~~~~~~~~~~{.java}
/* füge einen Listener hinzu, welcher die Fahrzeugtypen anpasst, abhängig von der Auswahl der Person */
personIDBox.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue)
																	-> setFahrzeugTypList(getIDfromBeschreibung(newValue)));

~~~~~~~~~~~~~~~

\subsection sec3_7 VII. Ausbaustufe: Algorithmische Vertiefung

\image html Ausbaustufe_7.png "" width= 761px

Die Ausgabe der Berechnungen erfolgt in einem Diagramm.

~~~~~~~~~~~~~~~{.java}
public void setFahrzeugTageStatistic(List<Fahrzeug> fahrzeugs, List<Buchung> buchungs) {

    // 4 dim. Array
    // 1. Zeile: FahrzeugID
    // 2. Zeile: dazugehörige Gesamtausleihtage
    // 3. Zeile: dazugehörige Ausleihhäufigkeit
    // 4. Zeile: Quotient, falls Ausleihhäufigkeit != 0 ist
	// sowie eine zusätzliche Liste mit den Fahrzeugbeschreibungen, da kein Array mit Integer und String möglich ist.

    int[][] ausleihe = new int[4][fahrzeugs.size()];
    herstellerMarkenList.clear();
    
	for( int i= 0; i < ausleihe[0].length; i++) {
		ausleihe[0][i]= fahrzeugs.get(i).getFahrzeugID();	// fügt in die erste Zeile alle vorhandenen FahrzeugIDs
    }

    for (Buchung b : buchungs) {
		int gebucht= b.getFahrzeugID();
		for( int i= 0; i < ausleihe[0].length; i++) {
			if( gebucht == ausleihe[0][i]) {						// falls die FahrzeugID in einem Buchungseintrag auftaucht, 
				ausleihe[2][i]++;									// so wird die dazugehörige Ausleihhäufigkeit um 1 erhöht
				ausleihe[1][i]= ausleihe[1][i] + b.getLeihdauer();	// und die Ausleihdauer um die ausgeliehenen Tage
			}
       	}
    }

    for ( int i= 0; i < ausleihe[0].length; i++) {
       	if (ausleihe[2][i] != 0) {							// falls Ausleihhäufigkeit != 0 ist,
															// so wird der Quotient aus Ausleihdauer und Ausleihhäufigkeit gebildet
       		ausleihe[3][i]= ausleihe[1][i]/ ausleihe[2][i];
       	} else {
       		ausleihe[3][i]= 0;
       	}
    }

	/* Sortierung nach Ausleihdauer, absteigend */
    int [][] Platzhalter= new int[2][1];

    for (int i= 0; i < ausleihe[0].length - 1; i++) {
    	int maxIndex= i;
    	Platzhalter[0][0]= ausleihe[0][i];
    	Platzhalter[1][0]= ausleihe[3][i];

    	for (int j= i + 1; j < ausleihe[0].length; j++) {
    		if (Platzhalter[1][0] < ausleihe[3][j]) {
    			maxIndex= j;
    			Platzhalter[0][0]= ausleihe[0][j];
       			Platzhalter[1][0]= ausleihe[3][j];
    		}
    	}

    	ausleihe[0][maxIndex]= ausleihe[0][i];
    	ausleihe[3][maxIndex]= ausleihe[3][i];

    	ausleihe[0][i]= Platzhalter[0][0];
      	ausleihe[3][i]= Platzhalter[1][0];
    }

	/* erstelle eine Liste mit den Fahrzeugbeschreibungen gemäß Reihenfolge */
    for (int i= 0; i < ausleihe[0].length; i++) {
    	for (Fahrzeug f : fahrzeugs) {
    		if (ausleihe[0][i] == f.getFahrzeugID()) {
    			herstellerMarkenList.add(f.getHersteller() + " " + f.getMarke()); // fügt in die Liste die Fahrzeugbeschreibung hinzu
    		}
    	}
    }

	/* erstelle Diagramm */
    XYChart.Series<String, Integer> series = new XYChart.Series<>();
    barChart.setTitle("Fahrzeug - durchschnittliche Ausleihdauer");
    barChart.setLegendVisible(false);

    /* Nehme Daten in die Statistik auf */
    for (int i = 0; i < herstellerMarkenList.size(); i++) {
        series.getData().add(new XYChart.Data<>(herstellerMarkenList.get(i), ausleihe[3][i]));
    }

    barChart.getData().add(series);
}
~~~~~~~~~~~~~~~

\subsection sec3_8 VII. Ausbaustufe: Vertiefung Datenstrukturen

\image html Ausbaustufe_8.png "" width= 761px

\subsubsection sec3_8_1 Binärer Suchbaum

In der Informatik besitzt ein Baum (tree) entweder Knoten (node) oder ist leer. Jeder nichtleere Baum besitzt eine Wurzel (root). <br>
Ein binärer Suchbaum, ist ein Baum der Ordnung 2, d.h. jeder Knoten im Baum kann maximal zwei Kinder haben (left-/rightChild). <br>
Neben der Wurzel unterscheidet man die innere Knoten (haben Nachfolger) von den äußeren Knoten (auch Blätter genannt; haben keine Nachfolger). <br>
Ein Knoten seinerseits hat als Parameter einen Schlüssel (dies kann eine Zahl, ein String oder ein Objekt sein) welcher zwingend eine totale Ordnung 
haben muss und zwei weitere Knoten (leftChild, rightChild). <br>

\image html Binary_Tree.png "Binärer Suchbaum - Quelle: http://sibi-leo.de/wiki/images/Binary_Tree.png"  width= 400px

In unserem Fall haben wir als Schlüssel unsere erstellten Personen als Objekte, sowie als Ordnungsrelation den Vergleich des Vornamens (lexikographisch). <br>
Sollte der Vorname identisch sein, so wird der Nachname verglichen. Sollte der Nachname ebenfalls identisch sein, so wird die PersonID verglichen. <br>
<br>
Zu den elementarsten Methoden eines binären Suchbaumes gehören das Finden eines Knotens, das Hinzufügen neuer Knoten (addNode), 
sowie das Löschen eines Knoten (delete). <br>
Die Vorzüge eines binären Suchbaumes ist die Reduzierung der Suchzeit. Die maximale Suchzeit ist von der Ordnung O(Höhe) (bestenfalls also O(Log(n+1))) 
(im Vergleich lineare Suche: O(n); n= Anzahl der Elemente). <br>
(Bsp.: n=1.048.575 => maximal 1.048.575 Vergleiche bei einer linearen Suche, jedoch nur maximal log(1.048.576)=20 Vergleiche im binären Suchbaum)<br>
Um einen Knoten/Person in einem Baum zu finden, vergleicht man am Anfang die Suchperson mit der Wurzel und vergleicht dann in Abhängigkeit von dem Ergebnis den linken oder 
rechten Nachfolger, bis man die Person gefunden hat oder null zurückgibt. <br>
Beim Hinzufügen eines neuen Knotens wird der richtige Platz zum Einfügen gefunden, indem die zu einfügende Person anfänglich mit der Wurzel verglichen wird und dann 
in Abhängigkeit des Vergleichswertes (-1: linker Teilbaum; +1 rechter Teilbaum) die Teilbäume durchgelaufen werden, bis ein Knoten ohne passenden Nachfolger 
gefunden wird.<br>
Beim Löschen eines Knotens müssen Fallunterscheidungen betrachtet werden. <br>
<ul>
<li> 1. Fall: der zu Löschende Knoten hat keine Nachfolger, dann wird beim Elternteil die Verbindung gekappt. </li>
<li> 2. Fall: der zu Löschende Knoten hat nur einen Nachfolger, dann wird beim Elternteil als Kind der Nachfolger eingetragen.</li>
<li> 3. Fall: der zu Löschende Knoten hat zwei Nachfolger. Hierfür müssen wir das kleinste Objekt in dem rechten SubBaum finden und als neuen Knoten setzen </li>
</ul>

\image html Entfernung_eines_Blattes.png "1. Fall: Entfernung eines Blattes - Quelle: http://www2.cs.uni-paderborn.de/cs/ag-monien/LEHRE/SS06/DuA/15.pdf"  width= 600px
\image html Entfernung_mit_einem_Kind.png "2. Fall: Entfernung mit einem Kind - Quelle: http://www2.cs.uni-paderborn.de/cs/ag-monien/LEHRE/SS06/DuA/15.pdf"  width= 600px
\image html Entfernung_mit_zwei_Kindern.png "3. Fall: Entfernung mit zwei Kindern - Quelle: http://www2.cs.uni-paderborn.de/cs/ag-monien/LEHRE/SS06/DuA/15.pdf"  width= 600px

\subsubsection sec3_8_2 AVL Baum
Liegt dem Erstellen eines binären Suchbaumes eine geordnete Liste zu Grunde, so entsteht ein gänzlich entarteter Suchbaum, der keinerlei Zeitvorteile gegenüber 
einer Liste hat. <br>

\image html Binaer_Baum_entartet.png "Binär Baum entartet"  width= 400px
\image html Binaer_Baum_ausbalanziert.png "Binär Baum \"ausbalanciert\""  width= 400px
\image html Binaer_Baum_AVL.png "AVL Baum"  width= 400px

Um dies entgegenzuwirken haben AVL Bäume (Adelson-Velski Landis) ein Balance-Kriterium. Beim Löschen und Einfügen neuer Elemente wird stets 
geprüft ob das Balance-Kriterium verletzt wurde. Ist dies der Fall so werden Reparaturmaßnahmen eingeleitet (in diesem Fall Rotationen). <br>
Das Balance-Kriterium eines AVL Baumes lautet: <br>
Die Balance (Höhenunterschied der beiden Nachfolger) eines jeden Knotens darf nicht kleiner als -1 und nicht größer als +1 sein! <br>
Bei den Rotationen müssen wir zwei Fälle betrachten: einfache und doppelte Rotation: <br>

\image html einfach_Rotation.png "1. Fall: einfach_Rotation - Quelle: http://www2.cs.uni-paderborn.de/cs/ag-monien/LEHRE/SS03/DuA/avl.pdf"  width= 600px
\image html doppel_Rotation.png "2. Fall: doppel_Rotation - Quelle: http://www2.cs.uni-paderborn.de/cs/ag-monien/LEHRE/SS03/DuA/avl.pdf"  width= 600px

\subsubsection sec3_8_3 Beispiele
\image html Unser_Binaer_Baum.png "Unser binärer Baum"  width= 600px
\image html Unser_AVL_Baum.png "Unser AVL Baum"  width= 600px

\section sec4 X. Ausbaustufe: Dokumentation (Basisanforderungen)

\image html Ausbaustufe_10.png "" width= 761px

\subsection sec4_1 Arbeitsrollen
<ul>
<li> Julia: Organisator, Software-Tests </li>
<li> Olga: Guru, Software-Tests </li>
<li> Simon: Feelgood-Manager, Protokollant, Software-Tests </li>
<li> Alex: Spec-Checker, Continuous Integration, Software-Tests </li>
</ul>

\subsection sec4_2 Milestones
\image html Milestones_1.png "" width= 1000px
\image html Milestones_2.png "" width= 1000px

\subsection sec4_3 Änderung der Milestones
Fast alle geplanten Ziele / Milestones wurden in einer grundlegenden und funktionsfähigen Version innerhalb der Zeitvorgaben erreicht. <br>
Eine Ausnahme bildeten die AVL-Bäume die erst nachträglich implementiert werden konnten. <br>
Anpassungen wegen kleinen Fehlern oder neuen Ideen wurden nachträglich hinzugefügt.<br>

\subsection sec4_4 Programmwahl
<b>Entwicklungsumgebung:</b> Eclipse und Scene Builder. <br>
Begründung: Allen Gruppenmitgliedern fehlen die Erfahrungen mit NetBeans und IntelliJ. <br>
<br>
<b>Datenaustausch:</b> GitHub. <br>
Begründung: Auch wenn es Zeit brauchte, bis alles funktionsfähig eingerichtet wurde, so überzeugten die Vorteile, wie 
versionsabhängiges pull und push, versionsabhängiges Vergleichen der Quelltexte, IssueManagement, History, Einbidung in Exclipse. <br>
<br>
<b>Dokumentation:</b> Astahe Community und DoxyGen. <br>
Begründung: Alle Gruppenmitglieder kennen sich mit Astah Community aus.<br>
DoxyGen wurde zur Erstellung dieser Seite genutzt.<br>

\subsection sec4_5 UML-Klassendiagramme

\image html UML_Klassendiagramm.png "UML-Klassendiagramm" width= 1000px

\subsection sec4_6 Probleme

\subsubsection sec4_6_1 GitHub

Das Einrichten/Implementieren von Github in Eclipse und die funktionsfähige Nutzung hatte etwas Zeit gekostet. <br>
Diese Zeit wurde durch außerschulische Sonderschichten ausgeglichen. <br>
<br>
Beim Hochladen eines Branches, hatte ein Gruppenmitglied eine Bibliothek eingebunden, die eigentlich nur zu Testzwecken benutzt wurde.
Als folge dessen konnten alle anderen Gruppenmitglieder diesen Branch zwar runterladen, jedoch das Programm nicht mehr ausführen. <br>
Die Zeit, die für die Fehlersuche benötigt wurde, wurde durch außerschulische Sonderschichten ausgeglichen. <br> 

\subsubsection sec4_6_2 SceneBuild

Anfängliche gab es Probleme beim aktualisieren des Programmes. Man hatte Änderungen in SceneBuilder vorgenommen, diese wurden aber nicht übernommen. <br>
Man musste mehrfach Eclipse neustarten oder die fxml Datei extra öffnen und abspeichern, bevor Änderungen übernommen wurden. <br>

\subsubsection sec4_6_3 AVL-Bäume

Da die binären Bäume und die AVL-Bäume von zwei verschiedenen Gruppenmitgliedern programmiert wurden, bauten die AVL-Bäume anfänglich nicht auf den binären Bäumen auf.<br>
Erst durch Neuprogrammierung einiger AVL-Methoden, konnten die AVL-Bäume als Kind von den binären Bäumen alle Methoden erben. <br>

\subsubsection sec4_6_4 ComboBox-Filterung

Eine automatische Anpassung der Listen für die ComboBoxen ist uns mit den Möglichkeiten von SceneBuilder nicht gelungen. <br>
Erst durch hinzufügen von Listener konnten wir dieses Problem beseitigen.<br>

\subsubsection sec4_6_5 History

Hier ist die Versionsgeschichte unseres Projektes, als Überblick über alle vorhandenen kleinen Problemen bei der Entstehung des Programmes:<br>

*********************************************************************
# 10MTS2_Fahrzeugverwaltung_JOSA
Schulprojekt

# History

# Version 1.9.0 07.05.2017
Anpassungen
+ Beim Erstellen eines neuen Fahrzeugs, geht die ID +1 hoch
+ FahrzeugID ist nicht mehr veränderbar
+ Sortierung des Nachnamens ist nun ausführlicher

# Version 1.8.3 07.05.2017
BugFixes
+ Eingabefelder in dem BuchungsEditDialog vergrößert
+ neue Spalte in der Buchung: Ausleihdatum
+ fehlende Führerscheinauswahl erzeugt Fehlermeldung
+ fehlende Fahrzeugtypauswahl erzeugt Fehlermeldung
+ Sortierung sind nun geschachtelt (z.B. identischer Nachname => sortiere weiter nach Vorname, dann nach ID)
+ Public/Private Sichtbarkeit wurde angepasst
+ Statistiken sind nun sortiert (absteigend)
+ einige exceptions wurden mit try /catch aufgefangen

# Version 1.8.2 07.05.2017
AVL Bäume wurden überarbeitet
+ Vererbung und Nutzung der Tree Methoden
+ Rotationen
+ repair-Methode
+ Präsentationsabschnitte

# Version 1.8.1 01.05.2017
AVL Baum hinzugefügt
+ ausbalancierter AVL Baum wird neben dem binären Baum erstellt
+ dazu wurde eine erbende Klasse erzeugt, welche Rotationen beherrscht

tbd:
+ löschen im AVL Baum


# Version 1.8.0 30.04.2017
Konfiguration der binären Suchbäume
+ Die Suchbäume haben jetzt nicht nur einen rechten Zweig.
+ Funktion zur Anzeige der Verzweigung hinzugefügt.
+ Funktion zum Löschen von Knoten hinzugefügt, samt Fallunterscheidung (Wurzel, Knoten mit einem Nachfolger oder zwei, Blätter)

tbd:
+ AVL Bäume hinzufügen (Suche nach Nachnamen) 

# Version 1.7.1 16.04.2017
Buchungsdatumkontrolle 
+ Bei jedem Start wird das aktuelle Datum in Relation zu den Rückgabedaten gesetzt und entsprechen der Ausleizustand von Personen und Fahrzeugen angepasst.
+ Bei jeder neuen Buchung und jeder Buchungsänderung wird nachgeschaut, ob im ausgewähltem Zeitraum die Person bereits etwas ausleiht oder das Fahrzeug bereits verliehen wird
+ Ein Button Buchung wurde dem Suchdialogfeld hinzugefügt

# Version 1.7.0 16.04.2017
Änderung EditBuchung
+ Die Reihenfolge wurde überarbeitet: wähle Person > wähle FahrzeugTyp > wähle Fahrzeug
+ die ComboBox für Personen enthält stets alle Personen im System
+ alle anderen ComboBoxen werden durch Listener stets an die getroffene Auswahl angepasst
+ Buchungsbutton bei Fahrzeug wurde entfernt
+ bei jeder neuen Buchung oder bearbeiteter Buchung werden sämtliche Buchungen überprüft, ob derer Rückgabedatum vor dem aktuellem Datum liegt

tbd:
+ Buchungsoption bei Suche mit binärem Baum

# Version 1.6.1 07.04.2017
Anpassungen und BugFixes 
+ Buchung Nr.1 bei leerer Buchungsliste ist nun möglich
+ Formatierung für Doxygen abgeschlossen
+ Ausgeliehenzeile bei Person- und FahrzeugEdit entfernt (Flag wird über
Buchungsmenü gesetzt)

tbd:
+ ausführliche Kommentare (jede Zeile^^)

# Version 1.6.1 07.04.2017
BugFixes
+ bei der PLZ sind nur noch 5 stellige digits erlaubt
+ keine IDs < 1 mehr erlaubt
+ Leihdauer zählt nun stets +1 Tage dazu

# Version 1.6.0 06.04.2017
Anpassungen
+ Vervollständigung der Baumsuche und der Sortierungen
+ Löschung Redundanter Codezeilen beim binären Baum(Tree) / Knoten(Node)
+ die Suchanfrage muss man nicht mehr zweimal schließen
+ Fehlermeldung bei der Suche, falls keine Person gefunden wird
+ Angabe eines Zeitunterschiedes zwischen linearer Suche und Suche über binären Baum
+ Hinzufügung von weiteren Sortierungsoptionen

tbd
+ Aktualisierung der ComboBox bei FahrzeugTypAuswahl (bisher funktioniert dies nur bei Tasteneinschlag im Feld Fahrzeug/Person)

# Version 1.5.0 05.04.2017 
Umfangreiche Änderung
+ Grundlegende Umstrukturierung der Klasse Buchung und BuchungsEditDialog
+ Umgehung der globalen Variable für die BuchungsID
+ ComboBox filtert nun auch nach Strings
+ Führerscheinarten mit Kombinationsmöglichkeiten erweitert
+ Die Buchungen beachten nun neben Fahrzeugtyp auch Führerscheintauglichkeit und Ausleihzustand. Ist eines nicht plausibel erfolgt eien Fehlermeldung
+ Bei der Initialisierung der Buchung werden die Listen für die ComboBoxen schon geladen
+ Einschränkung der Buchung nur auf per ComboBox ausgewählten Fahrzeuge und Personen
+ Entfernung weiterer redundanten Codezeilen

tbd
+ Laufzeitanzeige zur Ermittlung des Zeitunterschiedes der Suche mit binären Bäumen und linearer Suche
+ Suche in binären Bäumen auf Nachnamen erweitern
+ ComboBox soll beim Anklicken mit der Maus die Listen filtern/einlesen
+ hinzufügen der restlichen Sortierungstabellen

# Version 1.4.0 04.04.2017 
Binärer Baum mit Suchfunktion hinzugefügt.
+ Ebenso wurde redundanter Code gelöscht und die Kommentierung für DoxyGen angepasst.

# Version 1.3.5 30.03.2017
BuchungEditDialog verändert
+ Es wird nun neben der ID auch der Vor- und Nachname bzw. der Hersteller und die Marke in der gefilterten ComboBox angezeigt
+ Sortierung nach Hersteller hinzugefügt
+ Sortierung nach Marke hinzugefügt
+ Sortierung nach Kilometerstand hinzugefügt
+ Sortierung nach Leistung hinzugefügt
+ binärer Baum (Tree/Node) erstellt

# Version 1.3.4 29.03.2017
Automatisches laden von Personen und Fahrzeug IDs
+ bei den Buchungen werden nun Personen und Buchungs IDs automatisch geladen
+ BugFixes im Sortieralgorithmus

# Version 1.3.3 29.03.2017 
BugFix: 
+ remove commons_long_jar from Library

# Version 1.3.2 29.03.2017
Selection Sort funktionsfähig
+ SelectionSort zur Sortierung nach Nachnamen abgeschlossen

tbd
+ Sortierung für Vornamen, ID, Stadt hinzufügen

# Version 1.3.1 28.03.2017
Angefangener Controller für den Sortieralgorithmus und die Suche mit binären Bäumen
+ Controller Prototyp zur Nachnamensortierung mit "funktionsfähigem" Sortieralgorithmus.
+ Suchknopf und View-Grundgerüst für die Suche über einen binären Baum

tbd
+ mit SceneBuilder Scene bereitstellen und Controller über MainApp einbinden

# Version 1.2.2 28.03.2017 
ErrorHandling nicht vorhandene IDs
+ Bei der Buchung werden nicht vorhandene Personen und Fahrzeug IDs per Fehlermeldung abgefangen
+ Filter sind nun funktionsfähig
+ Die AutoCompleteFilter bei der Eingabe der PersonenID und FahrzeugID funktionieren nun einwandfrei

# Version 1.2.1 28.03.2017
Anpassung der Person und Fahrzeug-Edits
+ Das Erstellen von Fahrzeugen und Personen mit gleicher ID erzeugt eine Fehlermeldung.

tbd
+ bessere Filterung bei der Buchung
+ Sortierung bei Eintragung neuer Personen und Fahrzeugen
+ Verknüpfung zwischen Fahrzeugtyp+Führerschein+Fahrberechtigung
+ drei Statistiken
+ Buchungsunterscheidung zwischen ausleihen, zurückgeben und ändern
+ bessere Handhabung der Buchung mit Übergabe der personenData und fahrzeugData von der MainApp per Methoden

# Version 1.0.8 27.03.2017
Neue Statistik hinzugefügt
+ Statistik über Fahrzeugtypen
+ Statistik für Fahrzeugbuchungen hinzugefügt.

# Version 1.0.7 26.03.2017 
Modifizierung
+ Buchungsmöglichkeit direkt aus Personen- und Fahrzeugansicht
+ Automatische Berechnung der Ausleihdauer
+ Setzen des Ausleihzustandes bei der Buchung, abhängig vom Rückgabedatum und aktuellem Datum

tbd
+ Filterung bei der Buchung funktioniert noch nicht einwandfrei
+ PersonenID- und FahrzeugID-Duplikate ausschließen
+ Statistiken

# Version 1.0.6 25.03.2017
Neue Attribute und ChoiceBoxes
+ Attribute fahrzeugtyp, Lizenz und Ausgeliehen hinzugefügt und bei dem EditDialog per ChoiceBox hinzugefügt.

tbd
+ per Fahrzeugtyp Personen und Fahrzeuge aussortieren
+ automatische Berechnung der Ausleihtage
+ automatische Bestimmung des Ausleizustands per Datum
+ Statistiken

# Version 1.0.5.2 25.03.2017
AutoComplete ist so weit fertig
+ AutoComplete bei der ComboBox erzeugt zwar eine Fehlermeldung, wenn man zu viele Zahlen eingibt, die Auswahl funktioniert aber dennoch.
+ Die BuchungsIDs sind nicht mehr veränderbar, sondern werden automatisch eingetragen, d.h. die BuchungsID bleibt unverändert, wenn man etwas ändern möchte, oder die globale BuchungsID wird um eins erhöht, wenn eine neue Buchung angelegt wird.

tbd
+ Bei FahrzeugID und PersonID Duplikate ausschließen
+ Statistiken

# Version 1.0.5.1 23.03.2017
ComboBox Modifications
+ ComboBox.setEditable(true)
+ Entfernung auskommentiertem VersuchsCode

tbd
+ Autocomplete
+ Übernahme der ComboBoxauswahl in die Datenbank

# Version 1.0.4 23.03.2017 
ComboBoxen beim BuchungEditDialog hinzugefügt.
+ Bei der Buchung werden die IDs der Personen und Fahrzeuge in die ComboBox mit einem zusätzlichen Button eingelesen.

tbd
+ BuchungEditDialog soll Auswahl per ComboBox setzen
+ ComboBox mit Tastatureingabe und gleichzeitiger Auswahlreduzierung verbinden
+ Die IDs aller Personen, Fahrzeuge und Buchungen sollen jeweils fortlaufend und nicht veränderbar sein
+ Auswahlfeld für das Datum
+ Automatische Berechnung der Ausleihdauer

# Version 1.0.3 22.03.2017
Verknüpfung von Fahrzeug und Person unter der Buchungsklasse
+ Anhand der PersonID und FahrzeugID werden entsprechend Namen, Vornamen, Hersteller und Marke in der Buchungsübersicht angezeigt.

# Version 1.0.2 18.03.2017
Fertigstellung vorläufiger Buchung
+ Es existieren nun drei Datenbanken (Person, Fahrzeug, Buchung), die gespeichert, bearbeitet und geladen werden können. Leider sind sie noch ohne Bezug zueinander.
+ Einheitliche Dialogfelder.
+ Erstellung von Prototypen für die Buchungen.

tbd
+ Es fehlt z.B. ein Dropboxmenü bei der Buchung für die vorhanden Personen und Fahrzeuge, sowie ein automatisches Laden der zugehörigen Namen, Vornamen, Hersteller, Marke. Ebenso fehlt eine automatische Berechnung der Leihdauer.

# Version 1.0.1 18.03.2017
Grundlage der Fuhrparkverwaltung.
+ Es werden Personen und Fahrzeuge gespeichert und können bearbeiten und geladen werden.
+ Die Daten werden in zwei xml-Dateien gespeichert.

tbd
+ Controller für Buchung Ausbleibend.

# Version 1.0.0 18.03.2017 
Rohbau der Fahrzeugverwaltung.

# Version 0.9.0 16.03.2017
Aufgabenbereiche
+ Aufgabenbereich I fertig.
+ Aufgabenbereich II angefangen.
tbd
+ Verknüpfung mit Person und Fahrzeug ausbleibend.

# Version 0.8.0 15.03.2017
Erste Version
+ Aufgabenbereich I aus vollständigem JavaFX Tutorial
+ Aufgabenbereich II angefangen

*********************************************************************

\section sec5 XI. Ausbaustufe: Dokumentation (Vertiefung)

\image html Ausbaustufe_10.png "" width= 761px

\subsection sec5_1 Ablauf einer Buchung als UML-Klassendiagramm

\image html Buchungsablauf1.png "Buchungsablauf" width= 1000px

\subsection sec5_2 Ablauf einer Buchung als UML-Sequenzdiagramm

\image html Buchungsablauf2.png "Buchungsablauf" width= 1000px

*/